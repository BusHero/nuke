"use strict";(self.webpackChunknuke_website=self.webpackChunknuke_website||[]).push([[7455],{3905:function(t,e,n){n.d(e,{Zo:function(){return c},kt:function(){return g}});var i=n(67294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function r(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,i)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?r(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,i,a=function(t,e){if(null==t)return{};var n,i,a={},r=Object.keys(t);for(i=0;i<r.length;i++)n=r[i],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(i=0;i<r.length;i++)n=r[i],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var u=i.createContext({}),l=function(t){var e=i.useContext(u),n=e;return t&&(n="function"==typeof t?t(e):o(o({},e),t)),n},c=function(t){var e=l(t.components);return i.createElement(u.Provider,{value:e},t.children)},p={inlineCode:"code",wrapper:function(t){var e=t.children;return i.createElement(i.Fragment,{},e)}},m=i.forwardRef((function(t,e){var n=t.components,a=t.mdxType,r=t.originalType,u=t.parentName,c=s(t,["components","mdxType","originalType","parentName"]),m=l(n),g=a,d=m["".concat(u,".").concat(g)]||m[g]||p[g]||r;return n?i.createElement(d,o(o({ref:e},c),{},{components:n})):i.createElement(d,o({ref:e},c))}));function g(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var r=n.length,o=new Array(r);o[0]=m;var s={};for(var u in e)hasOwnProperty.call(e,u)&&(s[u]=e[u]);s.originalType=t,s.mdxType="string"==typeof t?t:a,o[1]=s;for(var l=2;l<r;l++)o[l]=n[l];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},22684:function(t,e,n){n.r(e),n.d(e,{assets:function(){return c},contentTitle:function(){return u},default:function(){return g},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return p}});var i=n(87462),a=n(63366),r=(n(67294),n(3905)),o=["components"],s={title:"GitHub Actions"},u=void 0,l={unversionedId:"cicd/github-actions",id:"cicd/github-actions",title:"GitHub Actions",description:"Running on GitHub Actions will automatically enable custom theming for your build log output including collapsible groups for better structuring:",source:"@site/docs/05-cicd/github-actions.md",sourceDirName:"05-cicd",slug:"/cicd/github-actions",permalink:"/docs/cicd/github-actions",draft:!1,editUrl:"https://github.com/nuke-build/nuke/edit/develop/website/docs/05-cicd/github-actions.md",tags:[],version:"current",lastUpdatedBy:"Matthias Koch",lastUpdatedAt:1656273622,formattedLastUpdatedAt:"6/26/2022",frontMatter:{title:"GitHub Actions"},sidebar:"tutorialSidebar",previous:{title:"Bitbucket",permalink:"/docs/cicd/bitbucket"},next:{title:"GitLab",permalink:"/docs/cicd/gitlab"}},c={},p=[{value:"Environment Variables",id:"environment-variables",level:2},{value:"Configuration Generation",id:"configuration-generation",level:2},{value:"Artifacts",id:"artifacts",level:3},{value:"Importing Secrets",id:"importing-secrets",level:3},{value:"Using the GitHub Token",id:"using-the-github-token",level:3},{value:"Caching",id:"caching",level:3}],m={toc:p};function g(t){var e=t.components,s=(0,a.Z)(t,o);return(0,r.kt)("wrapper",(0,i.Z)({},m,s,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Running on ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/features/actions"},"GitHub Actions")," will automatically enable custom theming for your build log output including ",(0,r.kt)("a",{parentName:"p",href:"https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#grouping-log-lines"},"collapsible groups")," for better structuring:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"GitHub Actions Log Output",src:n(86816).Z,width:"2002",height:"1280"})),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Please refer to the official ",(0,r.kt)("a",{parentName:"p",href:"https://docs.github.com/en/actions"},"GitHub Actions documentation")," for questions not covered here."))),(0,r.kt)("h2",{id:"environment-variables"},"Environment Variables"),(0,r.kt)("p",null,"You can access ",(0,r.kt)("a",{parentName:"p",href:"https://docs.github.com/en/actions/learn-github-actions/environment-variables"},"predefined environment variables")," by using the ",(0,r.kt)("inlineCode",{parentName:"p"},"GitHubActions")," class:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'GitHubActions GitHubActions => GitHubActions.Instance;\n\nTarget Print => _ => _\n    .Executes(() =>\n    {\n        Log.Information("Branch = {Branch}", GitHubActions.Ref);\n        Log.Information("Commit = {Commit}", GitHubActions.Sha);\n    });\n')),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Exhaustive list of strongly-typed properties"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"class GitHubActions\n{\n    string  Action            { get; }\n    string  Actor             { get; }\n    string  BaseRef           { get; }\n    string  EventName         { get; }\n    string  EventPath         { get; }\n    JObject GitHubContext     { get; }\n    JObject GitHubEvent       { get; }\n    string  HeadRef           { get; }\n    string  Home              { get; }\n    bool    IsPullRequest     { get; }\n    string  Job               { get; }\n    long    JobId             { get; }\n    string  PullRequestAction { get; }\n    int?    PullRequestNumber { get; }\n    string  Ref               { get; }\n    string  Repository        { get; }\n    string  RepositoryOwner   { get; }\n    long    RunId             { get; }\n    long    RunNumber         { get; }\n    string  ServerUrl         { get; }\n    string  Sha               { get; }\n    string  Token             { get; }\n    string  Workflow          { get; }\n    string  Workspace         { get; }\n}\n"))),(0,r.kt)("h2",{id:"configuration-generation"},"Configuration Generation"),(0,r.kt)("p",null,"You can generate ",(0,r.kt)("a",{parentName:"p",href:"https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions"},"workflow files")," from your existing target definitions by adding the ",(0,r.kt)("inlineCode",{parentName:"p"},"GitHubActions")," attribute. For instance, you can run the ",(0,r.kt)("inlineCode",{parentName:"p"},"Compile")," target on every push with the latest Ubuntu image: "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Build.cs"',title:'"Build.cs"'},'[GitHubActions(\n    "continuous",\n    GitHubActionsImage.UbuntuLatest,\n    On = new[] { GitHubActionsTrigger.Push },\n    InvokedTargets = new[] { nameof(Compile) })]\nclass Build : NukeBuild { /* ... */ }\n')),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Generated output"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title=".github/workflows/continuous.yml"',title:'".github/workflows/continuous.yml"'},"name: continuous\n\non: [push]\n\njobs:\n  ubuntu-latest:\n    name: ubuntu-latest\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Run './build.cmd Compile'\n        run: ./build.cmd Compile\n"))),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Whenever you make changes to the attribute, you have to ",(0,r.kt)("a",{parentName:"p",href:"/docs/getting-started/execution"},"run the build")," at least once to regenerate the workflow file."))),(0,r.kt)("h3",{id:"artifacts"},"Artifacts"),(0,r.kt)("p",null,"If your targets produce artifacts, like packages or coverage reports, you can publish those directly from the target definition:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'Target Pack => _ => _\n    .Produces(PackagesDirectory / "*.nupkg")\n    .Executes(() => { /* Implementation */ });\n')),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Generated output"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title=".github/workflows/continuous.yml"',title:'".github/workflows/continuous.yml"'},"- uses: actions/upload-artifact@v1\n  with:\n    name: packages\n    path: output/packages\n"))),(0,r.kt)("p",null,"After your build has finished, those artifacts will be listed under the ",(0,r.kt)("em",{parentName:"p"},"Summary")," tab:"),(0,r.kt)("p",{style:{maxWidth:"900px"}},(0,r.kt)("p",null,(0,r.kt)("img",{alt:"GitHub Actions Artifacts Tab",src:n(24438).Z+"#gh-light-mode-only",width:"1816",height:"452"}),"\n",(0,r.kt)("img",{alt:"GitHub Actions Artifacts Tab",src:n(32971).Z+"#gh-dark-mode-only",width:"1816",height:"452"}))),(0,r.kt)("h3",{id:"importing-secrets"},"Importing Secrets"),(0,r.kt)("p",null,"If you want to use ",(0,r.kt)("a",{parentName:"p",href:"https://docs.github.com/en/actions/security-guides/encrypted-secrets#about-encrypted-secrets"},"encrypted secrets")," from your organization or repository, you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"ImportSecrets")," property to automatically load them into a ",(0,r.kt)("a",{parentName:"p",href:"/docs/fundamentals/parameters#secret-parameters"},"secret parameter")," defined in your build:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Build.cs"',title:'"Build.cs"'},"[GitHubActions(\n    // ...\n    ImportSecrets = new[] { nameof(NuGetApiKey) })]\nclass Build : NukeBuild\n{\n    [Parameter] [Secret] readonly string NuGetApiKey;\n}\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Generated output"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title=".github/workflows/continuous.yml"',title:'".github/workflows/continuous.yml"'},"- name: Run './build.cmd Publish'\n  run: ./build.cmd Publish\n  env:\n    NuGetApiKey: ${{ secrets.NUGET_API_KEY }}\n"))),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"If you're facing any issues, make sure that the name in the GitHub settings is the same as generated into the workflow file. "))),(0,r.kt)("h3",{id:"using-the-github-token"},"Using the GitHub Token"),(0,r.kt)("p",null,"For every workflow run, GitHub generates a ",(0,r.kt)("a",{parentName:"p",href:"https://docs.github.com/en/actions/security-guides/automatic-token-authentication"},"one-time token")," with ",(0,r.kt)("a",{parentName:"p",href:"https://docs.github.com/en/actions/security-guides/automatic-token-authentication#permissions-for-the-github_token"},"adequate permissions")," that you can use to authenticate with the GitHub API. You can enable the GitHub token in your attribute as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Build.cs"',title:'"Build.cs"'},'[GitHubActions(\n    // ...\n    EnableGitHubToken = true)]\nclass Build : NukeBuild\n{\n    GitHubActions GitHubActions => GitHubActions.Instance;\n\n    Target Request => _ => _\n        .Executes(() =>\n        {\n            Log.Information("GitHub Token = {Token}", GitHubActions.Token);\n        });\n}\n')),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Generated output"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title=".github/workflows/continuous.yml"',title:'".github/workflows/continuous.yml"'},"- name: Run './build.cmd Release'\n  run: ./build.cmd Publish\n  env:\n    GITHUB_CONTEXT: ${{ toJSON(github) }}\n"))),(0,r.kt)("h3",{id:"caching"},"Caching"),(0,r.kt)("p",null,"By default, the generated workflow file will include a ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/actions/cache"},"caching step")," to reduce the time for installing the .NET SDK (if not preinstalled) and restoring NuGet packages."),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Generated output"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title=".github/workflows/continuous.yml"',title:'".github/workflows/continuous.yml"'},"- name: Cache .nuke/temp, ~/.nuget/packages\n  uses: actions/cache@v2\n  with:\n    path: |\n      .nuke/temp\n      ~/.nuget/packages\n    key: ${{ runner.os }}-${{ hashFiles('global.json', 'source/**/*.csproj') }}\n"))),(0,r.kt)("p",null,"You can customize the caching step by overwriting the following properties:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Build.cs"',title:'"Build.cs"'},'[GitHubActions(\n    // ...\n    CacheKeyFiles = new[] { "**/global.json", "**/*.csproj" },\n    CacheIncludePatterns = new[] { ".nuke/temp", "~/.nuget/packages" },\n    CacheExcludePatterns = new string[0])]\nclass Build : NukeBuild { /* ... */ }\n')))}g.isMDXComponent=!0},32971:function(t,e,n){e.Z=n.p+"assets/images/github-actions-artifacts-dark-f515065b8564b572d12ea7a6c8526b81.webp"},24438:function(t,e,n){e.Z=n.p+"assets/images/github-actions-artifacts-light-1bc895deea5ee25995d8d64b1893ae27.webp"},86816:function(t,e,n){e.Z=n.p+"assets/images/github-actions-60cd6356359a6c0881ffacd168b21b16.webp"}}]);